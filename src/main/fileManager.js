const fs = require('fs').promises;
const path = require('path');
const Store = require('electron-store');

class FileManager {
  constructor() {
    this.store = new Store();
    this.projectRoot = process.cwd();
    this.generatedAgentsDir = path.join(this.projectRoot, '.claude', 'generated-agents');
    this.existingAgentsDir = path.join(this.projectRoot, '.claude', 'agents');
    this.templatePath = path.join(this.projectRoot, 'SUBAGENT_PROMPT_TEMPLATE.md');

    // Ensure directories exist
    this.ensureDirectories();
  }

  async ensureDirectories() {
    try {
      await fs.mkdir(this.generatedAgentsDir, { recursive: true });
    } catch (error) {
      console.error('Error creating directories:', error);
    }
  }

  async saveAgent(agentData) {
    const { name, content, metadata } = agentData;

    // Create safe filename
    const safeFileName = `${name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-|-$/g, '')}.md`;

    const filePath = path.join(this.generatedAgentsDir, safeFileName);

    // Create full agent markdown with metadata
    const fullContent = this.formatAgentFile(content, metadata);

    await fs.writeFile(filePath, fullContent, 'utf-8');

    return {
      filePath,
      fileName: safeFileName,
      timestamp: new Date().toISOString(),
    };
  }

  formatAgentFile(content, metadata) {
    const timestamp = new Date().toISOString();
    return `# Subagent: ${metadata.name || 'Unnamed Agent'}

**Generated**: ${timestamp}
**Version**: 1.0.0
**Type**: ${metadata.type || 'custom'}

---

${content}

---

*Generated by Claude Subagent Generator v1.0.0*
`;
  }

  async loadGeneratedAgents() {
    try {
      const files = await fs.readdir(this.generatedAgentsDir);
      const agentFiles = files.filter((f) => f.endsWith('.md') && f !== '.gitkeep');

      const agents = await Promise.all(
        agentFiles.map(async (file) => {
          const filePath = path.join(this.generatedAgentsDir, file);
          const content = await fs.readFile(filePath, 'utf-8');
          const stats = await fs.stat(filePath);

          return {
            name: file.replace('.md', ''),
            fileName: file,
            content,
            created: stats.birthtime,
            modified: stats.mtime,
          };
        })
      );

      return agents.sort((a, b) => b.modified - a.modified);
    } catch (error) {
      console.error('Error loading generated agents:', error);
      return [];
    }
  }

  async loadExistingAgents() {
    try {
      const files = await fs.readdir(this.existingAgentsDir);
      const agentFiles = files.filter((f) => f.endsWith('.md'));

      const agents = await Promise.all(
        agentFiles.map(async (file) => {
          const filePath = path.join(this.existingAgentsDir, file);
          const content = await fs.readFile(filePath, 'utf-8');

          return {
            name: file.replace('.md', ''),
            fileName: file,
            content: `${content.substring(0, 500)}...`, // Just preview
            fullPath: filePath,
          };
        })
      );

      return agents.sort((a, b) => a.name.localeCompare(b.name));
    } catch (error) {
      console.error('Error loading existing agents:', error);
      return [];
    }
  }

  async consultAgent(agentType, query) {
    const agentPath = path.join(this.existingAgentsDir, `${agentType}.md`);

    try {
      const agentContent = await fs.readFile(agentPath, 'utf-8');

      // Return the agent content for the Head Architect to use
      return {
        agentType,
        content: agentContent,
        query,
        available: true,
      };
    } catch (error) {
      return {
        agentType,
        content: null,
        query,
        available: false,
        error: 'Agent not found',
      };
    }
  }

  async loadTemplate() {
    try {
      const template = await fs.readFile(this.templatePath, 'utf-8');
      return template;
    } catch (error) {
      console.error('Error loading template:', error);
      return '';
    }
  }

  async loadSettings() {
    return this.store.get('settings', {
      theme: 'dark',
      autoSave: true,
      consultAgents: true,
    });
  }

  async saveSettings(settings) {
    this.store.set('settings', settings);
  }
}

module.exports = FileManager;
