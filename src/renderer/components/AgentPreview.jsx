import { useState } from 'react';
import {
  Box,
  Typography,
  Paper,
  Button,
  TextField,
  Alert,
  CircularProgress,
  Divider,
} from '@mui/material';
import { Save, Refresh, Code } from '@mui/icons-material';
import HeadArchitectAgent from '../services/agentGenerator';

function AgentPreview({ agentGenerator }) {
  const [agentName, setAgentName] = useState('');
  const [agentType, setAgentType] = useState('');
  const [generatedContent, setGeneratedContent] = useState('');
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [generating, setGenerating] = useState(false);

  const handleGenerate = async () => {
    if (!agentName.trim() || !agentType.trim()) {
      return;
    }

    setGenerating(true);

    try {
      // Use the Head Architect Agent to generate the subagent
      const headArchitect = new HeadArchitectAgent();
      const result = await headArchitect.generateSubagent(
        agentGenerator.templateData,
        agentGenerator.documents,
        agentName,
        agentType
      );

      if (result.success) {
        setGeneratedContent(result.specification);
      } else {
        console.error('Generation failed:', result.error);
        // Fallback to simple template
        const preview = `# Subagent: ${agentName}

**Generated**: ${new Date().toISOString()}
**Version**: 1.0.0
**Type**: ${agentType}

## Core Specifications

### Core Functions
${agentGenerator.templateData.coreFunctions
  .filter((f) => f.trim())
  .map((f, i) => `${i + 1}. ${f}`)
  .join('\n')}

### Domain Expertise
${agentGenerator.templateData.domainExpertise
  .filter((f) => f.trim())
  .map((f, i) => `${i + 1}. ${f}`)
  .join('\n')}

### Input Types
${agentGenerator.templateData.inputTypes
  .filter((f) => f.trim())
  .map((f) => `- ${f}`)
  .join('\n')}

### Validation Rules
${agentGenerator.templateData.validationRules
  .filter((f) => f.trim())
  .map((f) => `- ${f}`)
  .join('\n')}

### Output Format
${agentGenerator.templateData.outputFormat
  .filter((f) => f.trim())
  .map((f) => `- ${f}`)
  .join('\n')}

### Performance Constraints
${agentGenerator.templateData.performanceConstraints
  .filter((f) => f.trim())
  .map((f) => `- ${f}`)
  .join('\n')}

### Style Guide
${agentGenerator.templateData.styleGuide
  .filter((f) => f.trim())
  .map((f) => `- ${f}`)
  .join('\n')}

### Integration Targets
${agentGenerator.templateData.integrationTargets
  .filter((f) => f.trim())
  .map((f) => `- ${f}`)
  .join('\n')}

${
  agentGenerator.documents.length > 0
    ? `
## Contextual Documentation
This subagent was generated with ${agentGenerator.documents.length} supporting document(s):
${agentGenerator.documents.map((d) => `- ${d.name} (${d.pages} pages)`).join('\n')}
`
    : ''
}

## Usage Instructions
This subagent should be used for tasks related to ${agentType}.

---

*Generated by Claude Subagent Generator v1.0.0*
`;
        setGeneratedContent(preview);
      }
    } catch (error) {
      console.error('Error generating agent:', error);
    } finally {
      setGenerating(false);
    }
  };

  const handleSave = async () => {
    if (!generatedContent) {
      return;
    }

    const result = await agentGenerator.saveAgent(generatedContent, {
      name: agentName,
      type: agentType,
    });

    if (result && result.success) {
      setSaveSuccess(true);
      setTimeout(() => setSaveSuccess(false), 3000);
    }
  };

  return (
    <Box>
      <Paper elevation={0} sx={{ p: 3, mb: 3, background: 'transparent' }}>
        <Typography variant="h4" gutterBottom>
          Agent Preview & Generation
        </Typography>
        <Typography variant="body1" color="text.secondary">
          Preview and save your generated subagent. Provide a name and type for your agent, then
          click Generate to see the preview.
        </Typography>
      </Paper>

      <Paper elevation={1} sx={{ p: 3, mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          Agent Metadata
        </Typography>
        <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
          <TextField
            fullWidth
            label="Agent Name"
            variant="outlined"
            value={agentName}
            onChange={(e) => setAgentName(e.target.value)}
            placeholder="e.g., API Response Validator"
          />
          <TextField
            fullWidth
            label="Agent Type"
            variant="outlined"
            value={agentType}
            onChange={(e) => setAgentType(e.target.value)}
            placeholder="e.g., validation-specialist"
          />
        </Box>
        <Button
          variant="contained"
          startIcon={<Code />}
          onClick={handleGenerate}
          disabled={!agentName.trim() || !agentType.trim() || generating}
          fullWidth
        >
          {generating ? <CircularProgress size={24} /> : 'Generate Preview (with AI Architecture)'}
        </Button>
        {generating && (
          <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
            Consulting with existing agents and generating specification...
          </Typography>
        )}
      </Paper>

      {generatedContent && (
        <>
          <Paper elevation={1} sx={{ p: 3, mb: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
              <Typography variant="h6">Generated Agent</Typography>
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Button
                  variant="outlined"
                  startIcon={<Refresh />}
                  size="small"
                  onClick={handleGenerate}
                >
                  Regenerate
                </Button>
                <Button
                  variant="contained"
                  startIcon={<Save />}
                  size="small"
                  onClick={handleSave}
                  disabled={agentGenerator.loading}
                >
                  Save Agent
                </Button>
              </Box>
            </Box>
            <Divider sx={{ mb: 2 }} />
            <Paper
              elevation={0}
              sx={{
                p: 2,
                backgroundColor: 'background.default',
                maxHeight: '500px',
                overflow: 'auto',
                fontFamily: 'monospace',
                fontSize: '0.875rem',
                whiteSpace: 'pre-wrap',
              }}
            >
              {generatedContent}
            </Paper>
          </Paper>

          {saveSuccess && (
            <Alert severity="success" sx={{ mb: 3 }}>
              Agent saved successfully to .claude/generated-agents/
            </Alert>
          )}
        </>
      )}

      {!generatedContent && (
        <Paper elevation={1} sx={{ p: 4, textAlign: 'center', background: 'rgba(0,0,0,0.05)' }}>
          <Code sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
          <Typography variant="h6" color="text.secondary">
            No preview generated yet
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Fill in the agent metadata above and click Generate Preview
          </Typography>
        </Paper>
      )}
    </Box>
  );
}

export default AgentPreview;
